@{
	ViewData["Title"] = "Dashboard 1";
}

@section Styles {
	<link rel="stylesheet" href="~/css/dashboard.css" />
}

<h2 class="text-center">Temperatura de estufa em tempo real</h2>

<div>
	<div class="d-inline-flex w-100 justify-content-center align-items-center mb-3 mt-3">
		<div class="d-flex justify-content-center align-items-center">
			<input id="btnSetPoint" type="checkbox" class="filter-btn" value="set point" />
			<label class="mb-0 mr-4 ml-2">Exibir SetPoint</label>
		</div>
		<select id="Estufa" name="Estufa" asp-items="ViewBag.Estufas" class="form-control w-25 mr-1"></select>
		<input type="button" class="filter-btn start ml-1" onclick="iniciaChart()" />
	</div>
</div>

<span id="temperaturaAtual" class="d-block text-center h5"></span>

<canvas id="temperatureChart" width="1000" height="450" style="background-color: white;"></canvas>

@section Scripts {
	<script src="~/js/dashboard.js"></script>
	<script>
		const estufas = @Html.Raw(ViewBag.JsonEstufas); // dados das estufas em JSON carregados pela ViewBag
		let estufaSelecionada; // dados da estufa estufa selecionada na combobox

		let temperatureChart; // canvas do gráfico
		let maiorTimestamp;

		// pontos no gráfico
		let pontosAcumulados = [];
		const qtdeMaximaDePontos = 1000;
		
		// linhas fixas no gráfico
		const annotations = {}

		let intervalGrafico;

		// temperatura almejada no sistema de controle (Kit Térmico do Marcones)
		const SET_POINT = 40;

		// monta o arcabouço do gráfico do dashboard
		function montaChart() {
			const ctx = document.getElementById('temperatureChart').getContext('2d');
			temperatureChart = montaInstanciaDeGrafico(ctx, pontosAcumulados, annotations);
		}

		// inicia o funcionamento do gráfico após seleção da estufa
		function iniciaChart() {
			// se o gráfico já foi iniciado antes, o interval deve ser resetado
			if (intervalGrafico)
				clearInterval(intervalGrafico);

			// limpa todos os pontos acumulados até então
			pontosAcumulados.splice(0, pontosAcumulados.length);

			// reseta o marco zero de data e datahora inicial
			maiorTimestamp = new Date();

			// limpa o texto que indica a temperatura instantânea da estufa
			document.getElementById('temperaturaAtual').innerHTML = '';

			// carrega os dados da estufa selecionada
			const idEstufaSelecionada = document.getElementById('Estufa').value;
			estufaSelecionada = estufas.find(e => e.Id == idEstufaSelecionada);

			montaRangesTemperatura(annotations, estufaSelecionada.TemperaturaMinima, estufaSelecionada.TemperaturaMaxima);

			updateChart();
			obtemTemperaturaAtualDoDispositivo(estufaSelecionada.Medidor.Id);
			
			intervalGrafico = setInterval(() => {
				updateChart();
				obtemTemperaturaAtualDoDispositivo(estufaSelecionada.Medidor.Id);
			}, 2000);
		}

		// obtem os dados de temperatura da estufa no Fiware e atualiza o gráfico
		function updateChart() {
			$.ajax({
				url: `${ENDPOINT_DADOS_HISTORICOS}${estufaSelecionada.Medidor.Id}`,
				method: 'GET',
				success: function (data) {
					// carrega os dados obtidos e seleciona apenas os que ainda não foram plotados no gráfico
					const dadosNaRequisicao = JSON.parse(data).contextResponses[0].contextElement.attributes[0].values
					let dadosParaInserir = dadosNaRequisicao.filter(d => new Date(d.recvTime) > maiorTimestamp);

					if (dadosParaInserir.length > 0) {
						// atualiza o referencial de data e hora para a próxima consulta
						maiorTimestamp = new Date(dadosParaInserir[dadosParaInserir.length - 1].recvTime);
						insereDadosNoGrafico(dadosParaInserir);
					}
					temperatureChart.update();
				}
			});
		}

		// habilita ou desabilita a linha fixa do setPoint de temperatura
		function toggleSetPoint() {
			const btnSetPoint = document.getElementById('btnSetPoint')
			const deveMostrarSetPoint = btnSetPoint.checked;
			if (deveMostrarSetPoint) {
				annotations.setPoint = montaAnnotationDoSetPoint(SET_POINT);
			} else {
				annotations.setPoint = undefined;
			}
			temperatureChart.update();
		}

		// insere os novos dados no gráfico
		function insereDadosNoGrafico(dados) {
			dados.forEach(d => {
				pontosAcumulados.push({
					x: new Date(d.recvTime),
					y: d.attrValue
				});
			});
			if (pontosAcumulados.length > qtdeMaximaDePontos) {
				const qtdeParaLimpar = pontosAcumulados.length - qtdeMaximaDePontos;
				pontosAcumulados.splice(0, qtdeParaLimpar);
			}
		}

		document.getElementById('btnSetPoint').addEventListener('click', toggleSetPoint);
	</script>
}

